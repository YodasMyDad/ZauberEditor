@using Zauber.RTE.Models
@inherits PanelBase

<div class="rte-panel-content">
    <h3 class="rte-panel-title">Insert Link</h3>

    <div class="rte-form-group">
        <label for="link-url" class="rte-label">URL</label>
        <input type="url"
               id="link-url"
               class="rte-input"
               @bind="_url"
               placeholder="https://example.com" />
    </div>

    <div class="rte-form-group">
        <label for="link-text" class="rte-label">Link Text</label>
        <input type="text"
               id="link-text"
               class="rte-input"
               @bind="_text"
               placeholder="Link text" />
    </div>

    <div class="rte-form-group">
        <label class="rte-checkbox-label">
            <input type="checkbox" @bind="_openInNewTab" />
            <span class="rte-checkbox-mark"></span>
            Open in new tab
        </label>
    </div>

    <div class="rte-panel-actions">
        <button type="button"
                class="rte-btn rte-btn-secondary"
                @onclick="CancelAsync">
            Cancel
        </button>
        <button type="button"
                class="rte-btn rte-btn-primary"
                @onclick="InsertAsync"
                disabled="@(string.IsNullOrEmpty(_url) || string.IsNullOrEmpty(_text))">
            Insert Link
        </button>
    </div>
</div>

@code {
    private string _url = string.Empty;
    private string _text = string.Empty;
    private bool _openInNewTab;
    private SelectionInfo? _originalSelection;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Api != null)
        {
            // Check if we're editing an existing link
            var existingLink = await Api.GetLinkAtCursorAsync();
            if (existingLink != null)
            {
                // Populate form with existing link data
                _url = existingLink.Href;
                _text = existingLink.Text;
                _openInNewTab = existingLink.Target == "_blank";
                _originalSelection = new SelectionInfo { SelectedText = existingLink.Text };
                Console.WriteLine($"Editing existing link: {_url}");
                
                // Select the entire link so we can replace it when inserting
                await Api.SelectLinkAtCursorAsync();
            }
            else
            {
                // Get the current selection to populate the text field
                _originalSelection = await Api.GetSelectionAsync();
                if (_originalSelection != null && !string.IsNullOrEmpty(_originalSelection.SelectedText))
                {
                    _text = _originalSelection.SelectedText;
                }
            }
            
            // Save the selection range so we can restore it later
            await Api.SaveSelectionRangeAsync();
            
            StateHasChanged();
        }
    }

    private async Task InsertAsync()
    {
        Console.WriteLine("=== LinkPanel.InsertAsync START ===");
        Console.WriteLine($"Api is null: {Api == null}");
        Console.WriteLine($"URL: '{_url}'");
        Console.WriteLine($"Text: '{_text}'");
        Console.WriteLine($"Original selection: {_originalSelection?.SelectedText ?? "null"}");
        
        if (Api == null || string.IsNullOrEmpty(_url) || string.IsNullOrEmpty(_text)) 
        {
            Console.WriteLine("Early return due to validation");
            return;
        }

        try
        {
            var attrs = new Dictionary<string, string>
            {
                ["href"] = _url
            };

            if (_openInNewTab)
            {
                attrs["target"] = "_blank";
                attrs["rel"] = "noopener noreferrer";
            }

            // Build the link HTML
            var htmlToInsert = HtmlBuilder.Link(_url, _text).Attrs(attrs).Build();
            
            // Check if we had an original selection when the panel opened
            if (_originalSelection != null && !string.IsNullOrEmpty(_originalSelection.SelectedText))
            {
                Console.WriteLine("Have original selection, restoring and replacing...");
                // Restore the saved selection range
                var restored = await Api.RestoreSelectionRangeAsync();
                Console.WriteLine($"Range restored: {restored}");
                
                if (restored)
                {
                    // Now insert the link, which will replace the restored selection
                    Console.WriteLine($"Inserting HTML to replace selection: {htmlToInsert}");
                    await Api.InsertHtmlAsync(htmlToInsert);
                }
                else
                {
                    // Fallback: just insert at current position
                    Console.WriteLine("Could not restore range, inserting at current position");
                    await Api.InsertHtmlAsync(htmlToInsert);
                }
            }
            else
            {
                // No original selection - just insert new link at current position
                Console.WriteLine($"No original selection, inserting HTML: {htmlToInsert}");
                await Api.InsertHtmlAsync(htmlToInsert);
            }
            
            // Clear the saved range
            await Api.ClearSavedSelectionRangeAsync();
            Console.WriteLine("Saved range cleared");
            
            Console.WriteLine("Closing panel...");
            await Api.ClosePanelAsync();
            Console.WriteLine("=== LinkPanel.InsertAsync END ===");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            // Log error and show toast
            await Api.ShowToastAsync($"Failed to insert link: {ex.Message}", ToastType.Error);
        }
    }

    private async Task CancelAsync()
    {
        await CloseAsync();
    }
}
