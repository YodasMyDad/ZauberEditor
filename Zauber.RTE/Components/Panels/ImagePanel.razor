@using Zauber.RTE.Models
@inherits PanelBase

<div class="rte-panel-content">
    <h3 class="rte-panel-title">Insert Image</h3>

    <div class="rte-form-group">
        <label for="image-url" class="rte-label">Image URL</label>
        <input type="url"
               id="image-url"
               class="rte-input"
               @bind="_imageUrl"
               placeholder="https://example.com/image.jpg" />
    </div>

    <div class="rte-form-group">
        <label for="image-alt" class="rte-label">Alt Text</label>
        <input type="text"
               id="image-alt"
               class="rte-input"
               @bind="_altText"
               placeholder="Describe the image" />
    </div>

    <div class="rte-form-group">
        <label class="rte-checkbox-label">
            <input type="checkbox" @bind="_includeCaption" />
            <span class="rte-checkbox-mark"></span>
            Include caption
        </label>
    </div>

    @if (_includeCaption)
    {
        <div class="rte-form-group">
            <label for="image-caption" class="rte-label">Caption</label>
            <input type="text"
                   id="image-caption"
                   class="rte-input"
                   @bind="_caption"
                   placeholder="Image caption" />
        </div>
    }

    <div class="rte-form-group">
        <label for="image-width" class="rte-label">Width (optional)</label>
        <input type="number"
               id="image-width"
               class="rte-input"
               @bind="_width"
               placeholder="Auto" />
    </div>

    <div class="rte-panel-actions">
        <button type="button"
                class="rte-btn rte-btn-secondary"
                @onclick="CancelAsync">
            Cancel
        </button>
        <button type="button"
                class="rte-btn rte-btn-primary"
                @onclick="InsertAsync"
                disabled="@string.IsNullOrEmpty(_imageUrl)">
            Insert Image
        </button>
    </div>
</div>

@code {
    private string _imageUrl = string.Empty;
    private string _altText = string.Empty;
    private string _caption = string.Empty;
    private bool _includeCaption;
    private int? _width;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Api != null)
        {
            // Save the selection range so we insert at the correct position
            await Api.SaveSelectionRangeAsync();
        }
    }

    private async Task InsertAsync()
    {
        if (Api == null || string.IsNullOrEmpty(_imageUrl)) return;

        try
        {
            // Build the image HTML
            var imgBuilder = HtmlBuilder.Image(_imageUrl, _altText);
            if (_width.HasValue)
                imgBuilder.Attr("width", _width.Value.ToString());

            string html;
            if (_includeCaption && !string.IsNullOrEmpty(_caption))
            {
                html = HtmlBuilder.Figure(_imageUrl, _altText, _caption)
                    .Attr("width", _width?.ToString() ?? "")
                    .Build();
            }
            else
            {
                html = imgBuilder.Build();
            }

            // Restore the saved selection/cursor position before inserting
            await Api.RestoreSelectionRangeAsync();
            
            await Api.InsertHtmlAsync(html);
            
            // Clear the saved range
            await Api.ClearSavedSelectionRangeAsync();
            
            await Api.ClosePanelAsync();
        }
        catch (Exception ex)
        {
            // Log error and show toast
            await Api.ShowToastAsync($"Failed to insert image: {ex.Message}", ToastType.Error);
        }
    }

    private async Task CancelAsync()
    {
        await CloseAsync();
    }
}
