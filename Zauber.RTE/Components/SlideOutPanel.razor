@using Zauber.RTE.Models

@if (_isOpen)
{
    <div class="rte-slideout-overlay" @onclick="CloseAsync" style="position: fixed; top: 0; right: 0; bottom: 0; left: 0; z-index: 9999; background: rgba(0,0,0,0.5); display: flex;">
        <div class="rte-slideout-panel" @onclick:stopPropagation="true" style="margin-left: auto; width: 400px; max-width: 90vw; height: 100%; background: white; box-shadow: -4px 0 12px rgba(0,0,0,0.15); display: flex; flex-direction: column;">
            <div class="rte-slideout-header" style="display: flex; align-items: center; justify-content: space-between; padding: 1rem; border-bottom: 1px solid #e5e7eb;">
                <h3 class="rte-slideout-title" style="margin: 0; font-size: 1.125rem; font-weight: 600;">@_currentTitle</h3>
                <button type="button"
                        class="rte-slideout-close"
                        @onclick="CloseAsync"
                        aria-label="Close panel"
                        style="display: flex; align-items: center; justify-content: center; width: 2rem; height: 2rem; border: none; border-radius: 0.25rem; background: transparent; color: #6b7280; cursor: pointer;">
                    <svg viewBox="0 0 24 24" aria-hidden="true" style="width: 1.25rem; height: 1.25rem; fill: currentColor;">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" />
                    </svg>
                </button>
            </div>

            <div class="rte-slideout-content" style="flex: 1; padding: 1rem; overflow-y: auto;">
                @if (_currentComponent != null && _api != null)
                {
                    <CascadingValue Value="@_api">
                        <DynamicComponent Type="@_currentComponent" Parameters="@_currentParameters" />
                    </CascadingValue>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EditorApi? Api { get; set; }

    private bool _isOpen;
    private Type? _currentComponent;
    private Dictionary<string, object>? _currentParameters;
    private string? _currentTitle;
    private EditorApi? _api;

    public async Task OpenAsync(Type componentType, object? parameters = null)
    {
        _currentComponent = componentType;
        _currentParameters = parameters as Dictionary<string, object> ?? new Dictionary<string, object>();
        _currentTitle = GetTitleFromComponent(componentType);
        _api = Api;

        _isOpen = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task CloseAsync()
    {
        _isOpen = false;
        _currentComponent = null;
        _currentParameters = null;
        _currentTitle = null;
        await InvokeAsync(StateHasChanged);
    }

    private string GetTitleFromComponent(Type componentType)
    {
        // Extract title from component name or attributes
        var name = componentType.Name;
        if (name.EndsWith("Panel"))
        {
            name = name.Substring(0, name.Length - 5);
        }
        return name;
    }
}
