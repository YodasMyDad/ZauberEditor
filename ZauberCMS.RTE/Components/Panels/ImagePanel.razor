@using ZauberCMS.RTE.Models
@inherits PanelBase

<div class="rte-panel-content">
    <h3 class="rte-panel-title">@(_isEditMode ? "Edit Image" : "Insert Image")</h3>

    @if (_allowBase64Upload)
    {
        <div class="rte-form-group">
            <label class="rte-label">Image Source</label>
            <div style="display: flex; gap: 0.5rem; margin-bottom: 0.75rem;">
                <button type="button"
                        class="rte-btn @(_sourceType == "url" ? "rte-btn-primary" : "rte-btn-secondary")"
                        style="flex: 1;"
                        @onclick="SelectUrlSource">
                    From URL
                </button>
                <button type="button"
                        class="rte-btn @(_sourceType == "file" ? "rte-btn-primary" : "rte-btn-secondary")"
                        style="flex: 1;"
                        @onclick="SelectFileSource">
                    From File
                </button>
            </div>
        </div>
    }

    @if (_sourceType == "url")
    {
        <div class="rte-form-group">
            <label for="image-url" class="rte-label">Image URL</label>
            <input type="url"
                   id="image-url"
                   class="rte-input"
                   @bind="_imageUrl"
                   @bind:event="oninput"
                   placeholder="https://example.com/image.jpg" />
        </div>
    }
    else
    {
        <div class="rte-form-group">
            <label for="image-file" class="rte-label">Select Image File</label>
            <InputFile id="image-file"
                       class="rte-input"
                       OnChange="HandleFileSelectedAsync"
                       accept="@_acceptedFileTypes" />
            @if (!string.IsNullOrEmpty(_fileErrorMessage))
            {
                <p style="color: #dc2626; font-size: 0.875rem; margin-top: 0.5rem;">@_fileErrorMessage</p>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(_imageUrl) || !string.IsNullOrEmpty(_imageDataUrl))
    {
        <div class="rte-form-group">
            <label class="rte-label">Preview</label>
            <div style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 1rem; text-align: center; background: #f9fafb;">
                <img src="@GetImageSource()" 
                     alt="Preview" 
                     style="max-width: 100%; max-height: 200px; object-fit: contain;" />
            </div>
        </div>
    }

    <div class="rte-form-group">
        <label for="image-alt" class="rte-label">Alt Text</label>
        <input type="text"
               id="image-alt"
               class="rte-input"
               @bind="_altText"
               placeholder="Describe the image" />
    </div>

    <div class="rte-panel-actions">
        <button type="button"
                class="rte-btn rte-btn-secondary"
                @onclick="CancelAsync">
            Cancel
        </button>
        <button type="button"
                class="rte-btn rte-btn-primary"
                @onclick="InsertAsync"
                disabled="@(string.IsNullOrEmpty(_imageUrl) && string.IsNullOrEmpty(_imageDataUrl))">
            @(_isEditMode ? "Update Image" : "Insert Image")
        </button>
    </div>
</div>

@code {
    [Parameter] public Dictionary<string, object>? Parameters { get; set; }

    private string _imageUrl = string.Empty;
    private string _imageDataUrl = string.Empty;
    private string _altText = string.Empty;
    private string _sourceType = "url";
    private string _fileErrorMessage = string.Empty;
    private bool _isEditMode = false;
    private string _acceptedFileTypes = ".jpg,.jpeg,.gif,.png";
    private bool _allowBase64Upload = true;

    protected override Task OnInitializedAsync()
    {
        // Check if base64 upload is enabled from settings
        if (Api != null)
        {
            var settings = Api.GetSettings();
            _allowBase64Upload = settings.ImageConstraints.AllowBase64ImageUpload;
            
            // Build accepted file types from settings
            var types = settings.ImageConstraints.AllowedImageTypes;
            if (types.Count > 0)
            {
                _acceptedFileTypes = string.Join(",", types);
            }
        }
        
        return Task.CompletedTask;
    }

    protected override Task OnParametersSetAsync()
    {
        // Check if we're editing an existing image (passed as parameter)
        if (Parameters != null && Parameters.TryGetValue("ExistingImage", out var imageObj) && imageObj is ImageInfo existingImage)
        {
            _isEditMode = true;
            _altText = existingImage.Alt ?? string.Empty;
            
            if (existingImage.IsDataUrl)
            {
                _sourceType = "file";
                _imageDataUrl = existingImage.Src ?? string.Empty;
            }
            else
            {
                _sourceType = "url";
                _imageUrl = existingImage.Src ?? string.Empty;
            }
        }
        
        return Task.CompletedTask;
    }

    private void SelectUrlSource()
    {
        _sourceType = "url";
    }

    private void SelectFileSource()
    {
        _sourceType = "file";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Api != null)
        {
            if (_isEditMode)
            {
                // Select the image so we can replace it when updating
                await Api.SelectImageAtCursorAsync();
            }
            else
            {
                // Save the selection range so we insert at the correct position
                await Api.SaveSelectionRangeAsync();
            }
        }
    }

    private async Task HandleFileSelectedAsync(InputFileChangeEventArgs e)
    {
        _fileErrorMessage = string.Empty;
        var file = e.File;

        if (file == null) return;

        // Check file extension
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        var allowedExtensions = new[] { ".jpg", ".jpeg", ".gif", ".png" };
        
        if (!allowedExtensions.Contains(extension))
        {
            _fileErrorMessage = $"File type {extension} is not allowed. Please select a JPG, GIF, or PNG image.";
            return;
        }

        // Check file size (limit to 5MB)
        const long maxFileSize = 5 * 1024 * 1024;
        if (file.Size > maxFileSize)
        {
            _fileErrorMessage = "File size exceeds 5MB limit.";
            return;
        }

        try
        {
            // Read file as base64
            await using var stream = file.OpenReadStream(maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            
            // Determine MIME type
            var mimeType = extension switch
            {
                ".jpg" or ".jpeg" => "image/jpeg",
                ".gif" => "image/gif",
                ".png" => "image/png",
                _ => "image/jpeg"
            };

            _imageDataUrl = $"data:{mimeType};base64,{base64}";
            _imageUrl = string.Empty; // Clear URL when file is selected
        }
        catch (Exception ex)
        {
            _fileErrorMessage = $"Failed to read file: {ex.Message}";
        }
    }

    private string GetImageSource()
    {
        return !string.IsNullOrEmpty(_imageDataUrl) ? _imageDataUrl : _imageUrl;
    }

    private async Task InsertAsync()
    {
        if (Api == null) return;

        var imageSrc = GetImageSource();
        if (string.IsNullOrEmpty(imageSrc)) return;

        try
        {
            // Build the image HTML with responsive inline styles
            var imgBuilder = HtmlBuilder.Image(imageSrc, _altText)
                .Style("max-width: 100%; height: auto; display: block;");

            var html = imgBuilder.Build();

            if (_isEditMode)
            {
                // Select the image again (in case selection was lost)
                await Api.SelectImageAtCursorAsync();
                // Replace the existing image
                await Api.ReplaceSelectionAsync(html);
            }
            else
            {
                // Restore the saved selection/cursor position before inserting
                await Api.RestoreSelectionRangeAsync();
                await Api.InsertHtmlAsync(html);
                await Api.ClearSavedSelectionRangeAsync();
            }
            
            await Api.ClosePanelAsync();
        }
        catch (Exception ex)
        {
            await Api.ShowToastAsync($"Failed to insert image: {ex.Message}", ToastType.Error);
        }
    }

    private async Task CancelAsync()
    {
        await CloseAsync();
    }
}
