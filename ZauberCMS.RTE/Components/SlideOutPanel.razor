@using ZauberCMS.RTE.Models

@if (_isOpen)
{
    <div class="rte-slideout-overlay" @onclick="CloseAsync">
        <div class="rte-slideout-panel" @onclick:stopPropagation="true">
            <div class="rte-slideout-header">
                <h3 class="rte-slideout-title">@_currentTitle</h3>
                <button type="button"
                        class="rte-slideout-close"
                        @onclick="CloseAsync"
                        aria-label="Close panel">
                    <svg viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z" />
                    </svg>
                </button>
            </div>

            <div class="rte-slideout-content">
                @if (_currentComponent != null && _api != null)
                {
                    <CascadingValue Value="@_api">
                        <DynamicComponent Type="@_currentComponent" Parameters="@_currentParameters" />
                    </CascadingValue>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public IEditorApi? Api { get; set; }

    private bool _isOpen;
    private Type? _currentComponent;
    private Dictionary<string, object>? _currentParameters;
    private string? _currentTitle;
    private IEditorApi? _api;

    public async Task OpenAsync(Type componentType, object? parameters = null)
    {
        _currentComponent = componentType;
        _currentParameters = parameters as Dictionary<string, object> ?? new Dictionary<string, object>();
        _currentTitle = GetTitleFromComponent(componentType);
        _api = Api;

        _isOpen = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task CloseAsync()
    {
        _isOpen = false;
        _currentComponent = null;
        _currentParameters = null;
        _currentTitle = null;
        await InvokeAsync(StateHasChanged);
    }

    private string GetTitleFromComponent(Type componentType)
    {
        // Extract title from component name or attributes
        var name = componentType.Name;
        if (name.EndsWith("Panel"))
        {
            name = name.Substring(0, name.Length - 5);
        }
        return name;
    }
}
