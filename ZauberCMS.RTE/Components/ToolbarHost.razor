@using ZauberCMS.RTE.Models
@inject ToolbarDiscoveryService ToolbarDiscovery

@{
    var effectiveLayout = ToolbarLayout?.GetEffectiveLayout() ?? [];
}

@if (effectiveLayout.Any())
{
    @foreach (var layoutItem in effectiveLayout)
    {
        @if (layoutItem is ToolbarBlock block)
        {
            <div class="rte-toolbar-block @block.CssClass">
                @foreach (var itemId in block.Items)
                {
                    var item = ToolbarDiscovery.GetItem(itemId);
                    if (item != null && IsItemEnabled(item))
                    {
                        @if (item.ItemType == ToolbarItemType.Dropdown)
                        {
                            <ToolbarDropdown Item="item"
                                           IsActive="item.IsActive(EditorState)"
                                           IsEnabled="item.IsEnabled(EditorState)"
                                           EditorState="EditorState"
                                           OnChildItemClick="HandleDropdownChildClick" />
                        }
                        else
                        {
                            <ToolbarButton Item="item"
                                         IsActive="item.IsActive(EditorState)"
                                         IsEnabled="item.IsEnabled(EditorState)"
                                         OnClick="() => OnItemExecuted.InvokeAsync(itemId)" />
                        }
                    }
                }
            </div>
        }
        else if (layoutItem is ToolbarSeparator separator)
        {
            <div class="rte-toolbar-separator @separator.CssClass"></div>
        }
        else if (layoutItem is ToolbarItemReference itemRef)
        {
            var item = ToolbarDiscovery.GetItem(itemRef.ItemId);
            if (item != null && IsItemEnabled(item))
            {
                <div class="rte-toolbar-single-item @itemRef.CssClass">
                    @if (item.ItemType == ToolbarItemType.Dropdown)
                    {
                        <ToolbarDropdown Item="item"
                                       IsActive="item.IsActive(EditorState)"
                                       IsEnabled="item.IsEnabled(EditorState)"
                                       EditorState="EditorState"
                                       OnChildItemClick="HandleDropdownChildClick" />
                    }
                    else
                    {
                        <ToolbarButton Item="item"
                                     IsActive="item.IsActive(EditorState)"
                                     IsEnabled="item.IsEnabled(EditorState)"
                                     OnClick="() => OnItemExecuted.InvokeAsync(itemRef.ItemId)" />
                    }
                </div>
            }
        }
    }
}

@code {
    [Parameter] public ToolbarLayout ToolbarLayout { get; set; } = ToolbarLayout.Default;
    [Parameter] public EditorCapabilities Capabilities { get; set; } = new();
    [Parameter] public EditorState EditorState { get; set; } = new();
    [Parameter] public EventCallback<string> OnItemExecuted { get; set; }

    private bool IsItemEnabled(IToolbarItem item)
    {
        // Check capabilities based on item placement
        return item.Placement switch
        {
            ToolbarPlacement.Inline => Capabilities.TextFormatting,
            ToolbarPlacement.Block => Capabilities.TextFormatting,
            ToolbarPlacement.Insert => Capabilities.InteractiveElements,
            ToolbarPlacement.Media => Capabilities.EmbedsAndMedia,
            _ => true
        };
    }

    private async Task HandleDropdownChildClick(IToolbarItem childItem)
    {
        // Execute the child item
        await OnItemExecuted.InvokeAsync(childItem.Id);
    }
}
